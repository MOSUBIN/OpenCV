using OpenCvSharp;
using OpenCvSharp.Internal.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp167
{


    //색상 히스토그램 그리기 
    internal class Program
    {
        //const Mat& image는 읽기 전용으로 이미지 데이터에 접근할 수 있도록 하는 것.
        //히스토그램 계산 함수 
        static void calc_Histo(Mat image, out Mat hist, int bins, int range_max = 256)
        {
            // C#의 out 키워드가 해당 변수가 메서드 내에서 초기화되어야 한다는 것을 강제하는 역할
            hist = new Mat();
        }


        //hue 채널에 대한 색상 팔레트 행렬 생성 
        static Mat make_palatte(int rows) //C#에서는 함수가 Mat 객체를 반환하도록 선언된 경우 해당 객체를 return 해야함.
        {
            Mat hsv = new Mat(rows, 1, MatType.CV_8UC3);
            for(int i = 0; i < rows; i++)        //행수만큼 반복 
            {
                //c#에서는 uchar (x) byte( o)
                //saturate_cast c# (x) 값의 범위를 특정 데이터 형식에 맞게 클리핑(제한)하는 데 사용
                float huefloat = (float)i / rows * 180;
                byte hue = (byte)Math.Min(Math.Max(huefloat, 0), 255);  //색상계산 

                hsv.At<Vec3b>(i) = new Vec3b(hue, 255, 255);       //HSV 컬러 지정 / 3개 채널 화소값 지정
            }

            Cv2.CvtColor(hsv, hsv, ColorConversionCodes.HSV2BGR); // HSV에서 BGR로 변환
            return hsv;
            
        }
        //색상으로 히스토그램 그리기 
        static void draw_histo_hue(Mat hist, out Mat hist_img, Size size)
        {
            Mat hsv_palatte = make_palatte(hist.Rows); // HSV 색상 팔레트 만들기
            hist_img = new Mat(size, MatType.CV_8UC3, Scalar.All(255));
            float bin = (float)hist_img.Cols / hist.Rows;     //계급 개수
            Cv2.Normalize(hist, hist, 0, hist_img.Rows, NormTypes.MinMax); //정규화 Normalize

            for(int i = 0; i < hist.Rows; i++)
            {
                float start_x = (i * bin);
                float end_x = (i + 1) * bin;
                Point pt1 = new Point(start_x, 0); //Point 객체를 생성하고 초기화하는 부분
                Point pt2 = new Point(end_x, hist.At<float>(i));

                //Scalar로 초기화하려면 Vec3b를 Scalar로 변환
                Vec3b vec3bValue = hsv_palatte.At<Vec3b>(i);
                Scalar color = new Scalar((byte)vec3bValue.Item0, (byte)vec3bValue.Item1, ((byte)vec3bValue.Item2)); //색상팔레트 지정 

                if (pt2.Y > 0)
                
                    Cv2.Rectangle(hist_img, pt1, pt2, color, -1);  //팔레트 색으로 그리기 
                
                 
            }
            Cv2.Flip(hist_img, hist_img, FlipMode.X);    //상하 뒤집기
        }
        static void Main(string[] args)
        {
            //읽기 옵션으로 컬러영상 읽기 
            Mat image = Cv2.ImRead("C:\\Temp\\img\\contrast_test.jpg", ImreadModes.Color); //컬러 영상 읽기 
            if (image.Empty())   //예외 상황 
            {
                Console.WriteLine("영상을 읽지 못하였습니다");
                Environment.Exit(0);

            }

            Mat HSV_img = new Mat();
            Mat[] HSV_arr = new Mat[3]; //배열 선언 

            Cv2.CvtColor(image, HSV_img, ColorConversionCodes.BGR2HSV); //BGR컬러 -> HSV 컬러 , HUE 채널을 가져오기 위해 
            HSV_arr = Cv2.Split(HSV_img);      //2인수는 out 키워드와 함께 전달되어야 함. //채널 분리                       
                                                  //out은 메서드의 매개변수 중 하나로 사용되며, 해당 매개변수에 값을 할당하여 메서드 외부에서도 사용할 수 있도록 하는 것.

            Mat hue_hist = new Mat();
            Mat hue_hist_img = new Mat();
            //각 차원의 값 범위: new Rangef[] { new Rangef(0, 180) }
            Cv2.CalcHist(new Mat[] { HSV_arr[0] }, new int[] { 0 }, null, hue_hist, 1, new int[] { 18 }, new Rangef[] { new Rangef(0, 180) });
            Size size = new Size(360, 200);
            draw_histo_hue(hue_hist, out hue_hist_img, size);//히스토그램 그래프 

            Cv2.ImShow("image", image);
            Cv2.ImShow("Hue_hist_img", hue_hist_img);
            Cv2.WaitKey();
        }
    }
}
